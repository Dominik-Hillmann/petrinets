package view;

import java.util.HashSet;
import java.util.Set;

import org.graphstream.graph.Edge;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.MultiGraph;

import model.Arc;
import model.Marking;
import model.NodeNotFoundException;
import model.Pair;
import model.ReachabilityGraph;

public class VisualReachabilityGraph extends MultiGraph {
	private ReachabilityGraph sourceNet;
	private final String CSS_FILE = "url(" + 
    		System.getProperty("user.dir") +
    		"/ressources/graph.css)";
	
	
	public VisualReachabilityGraph(ReachabilityGraph reach) {
		super("Erreichbarkeitsgraph");
		sourceNet = reach;
		
		addAttribute("ui.stylesheet", CSS_FILE);
		createGraphNodes();
	}
	
	public void update(ReachabilityGraph reachNet) {
		// Hinzuf√ºgen, wenn neue dazu
		// Wegmachen, wenn alte weg
		
		Set<String> modelIds = new HashSet<String>(); 
		reachNet.getMarkings().forEach(marking -> modelIds.add(marking.getId()));
		
		Set<String> visualIds = new HashSet<String>();
		getEachNode().forEach(node -> visualIds.add(node.getId()));
		
		System.out.println("Model: " + modelIds.toString());
		System.out.println("Visuell: " + visualIds.toString());
		
		// TODO
		Set<String> idsToBeRemoved;		
		
		Set<String> idsToBeAdded = new HashSet<String>();
		modelIds.forEach(id -> {
			if (!visualIds.contains(id))
				idsToBeAdded.add(id);
		});
		System.out.println("To be added " + idsToBeAdded.toString());
		
		
		for (String addedId : idsToBeAdded) {
			Marking marking;
			try {
				marking = reachNet.getMarking(addedId);
			} catch (NodeNotFoundException e) {
				continue;
			}
			
			Node markingVisual = addNode(addedId);
			markingVisual.addAttribute("ui.label", marking.guiName());
			markingVisual.addAttribute("ui.class", "marking");
						
			Set<String> modelArcIds = new HashSet<String>();
			marking.getArcs().forEach(arc -> modelArcIds.add(arc.getId()));
			
			Set<String> visualArcIds = new HashSet<String>();
			getEachEdge().forEach(edge -> visualArcIds.add(edge.getId()));
			
			Set<String> arcsToBeAdded = new HashSet<String>();
			modelArcIds.forEach(id -> {
				if (!visualArcIds.contains(id))
					arcsToBeAdded.add(id);
			});
			
			for (String arcIdToBeAdded : arcsToBeAdded) {
				Arc modelArc;
				try {
					modelArc = marking.getArc(arcIdToBeAdded);
				} catch (NodeNotFoundException e) {
					continue;
				}
				String startNodeId = modelArc.getFrom().getId();
				Node start = getNode(startNodeId);
				String endNodeId = modelArc.getTo().getId();
				Node end = getNode(endNodeId);
				
				addEdge(modelArc.getId(), start, end);
			}
			
			System.out.println("====================");
			System.out.println("MODEL EDG" + modelArcIds.toString());
			System.out.println("VIS EDG" + visualArcIds.toString());
			System.out.println("====================");
		}
		
	}
	

	
	private void createGraphNodes() {
		for (Marking marking : sourceNet.getMarkings()) {
			Node markingGraphicalNode = addNode(marking.getId());
			markingGraphicalNode.addAttribute("ui.class", "marking");
			markingGraphicalNode.addAttribute("ui.label", marking.getName());
			
			if (marking.equals(sourceNet.getRoot()))
				markingGraphicalNode.addAttribute("ui.class", "root");
		}
		
		Set<String> alreadyAddedIds = new HashSet<String>();
		for (Arc arc : sourceNet.getArcs()) {
			String fromId = arc.getFrom().getId();
			String toId = arc.getTo().getId();
			Pair<String, String> idPair = new Pair<String, String>(fromId, toId);
			
			Node from = getNode(fromId);
			Node to = getNode(toId);
			boolean idAlreadyUsed = alreadyAddedIds.contains(idPair.toString());
			if (idAlreadyUsed) {
				continue;
			} else {
				addEdge(arc.getId(), from, to, true);
				alreadyAddedIds.add(idPair.toString());
			}	
		}
	}
	
	private void removeAll() {
		for (Edge edge : getEachEdge()) {
			removeEdge(edge);
		}
		
		for (Node node : getEachNode()) {
			removeNode(node);
		}
	}
}

package controller;

import model.GraphIsUnlimitedException;
import model.NodeNotFoundException;
import model.PetriNet;
import model.ReachabilityGraph;
//import view.VisualPetriGraph;
//import mypackage.view.MyFrame;
import view.GraphsFrame;
import view.VisualPetriGraph;
import view.VisualReachabilityGraph;

import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;

public class Controller {

	/** Hauptfenster der Anwendung */
	private GraphsFrame frame;

	/** Graph, der angezeigt wird */
	private VisualPetriGraph petriGraph;
	private VisualReachabilityGraph reachGraph;
	
	private PetriNet petriNet;
	private ReachabilityGraph reachNet;
	
	
	private boolean isAnalyzed = false;
	

	public Controller(GraphsFrame frame, PetriNet petriNet, ReachabilityGraph reachNet) {
		this.frame = frame;	
		this.petriNet = petriNet;
		this.reachNet = reachNet;
		
		petriGraph = new VisualPetriGraph(petriNet);
		reachGraph = new VisualReachabilityGraph(reachNet);
	}

	public void clickNodeInGraph(String id) throws NodeNotFoundException {
		System.out.println("Clicked: " + petriNet.getNodeById(id).toString());
		System.out.println(petriGraph.getNode(id).getAttribute("ui.class").toString());

		reachGraph.addNode(id + "pressedf");
	}
	
	public void analyze() {
		try {
			reachNet.analyze(petriNet);
			reachGraph.update(reachNet);
		} catch (GraphIsUnlimitedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void reset() {
		reachNet.reset();
		reachGraph.update(reachNet);
	}
	
	public VisualPetriGraph getPetriGraph() {
		return petriGraph;
		
	}
	
	public VisualReachabilityGraph getReachGraph() {
		return reachGraph;
	}
	
	
}
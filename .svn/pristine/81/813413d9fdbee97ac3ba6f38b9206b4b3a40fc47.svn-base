package model;

import java.util.Map;
import java.util.Set;

public class PetriNet {
	Set<Place> places;
	Set<Transition> transitions;
	
	public PetriNet(Set<Place> places, Set<Transition> transitions) {
		this.places = places;
		this.transitions = transitions;
	}
	
	/**
	 * Findet eine Stelle anhand derer ID.
	 * @param id Die ID der gesuchten Stelle.
	 * @return Die Stelle mit dieser ID.
	 * @throws NodeNotFoundException Wenn keine Stelle mit dieser ID im Petrinetz existiert.
	 */
	public Place getPlaceById(String id) throws NodeNotFoundException {
		for (Place place : places) {
			if (place.hasId(id)) {
				return place;
			}
		}
		
		throw new NodeNotFoundException("Stelle mit der ID " + id + " konnte nicht gefunden werden.");
	}
	
	/**
	 * Findet eine Transition anhand derer ID.
	 * @param id Die ID der gesuchten Transition.
	 * @return Die Transition, die diese ID besitzt.
	 * @throws NodeNotFoundException Wenn keine Transition mit dieser ID im Petrinetz existiert.
	 */
	public Transition getTransitionById(String id) throws NodeNotFoundException {
		for (Transition transition : transitions) {
			if (transition.hasId(id)) {
				return transition;
			}
		}
		
		throw new NodeNotFoundException("Transition mit der ID " + id + " konnte nicht gefunden werden.");
	}
	
	/**
	 * Findet einen Knoten im Petrinetz anhand dessen ID.
	 * @param id Die ID des Knoten.
	 * @return Den gesuchten Knoten.
	 * @throws NodeNotFoundException Wenn kein Knoten mit dieser ID im Petrinetz existiert.
	 */
	public Node getNodeById(String id) throws NodeNotFoundException {
		try {
			return (Node) getPlaceById(id);
		} catch (NodeNotFoundException e) {
			return (Node) getTransitionById(id);
		}
	}
	
	/**
	 * Ordnet jedem Knoten einen Namen zu.
	 * @param names Die IDs, denen Namen zugeordnet sind.
	 * @throws NodeNotFoundException Wenn eine ID in names nicht im Petrinetz existiert.
	 */
	public void initNames(Map<String, String> names) throws NodeNotFoundException {
		Set<String> ids = names.keySet();
		for (String id : ids) {
			Node nodeToBeNamed = getNodeById(id);
			String name = names.get(id);
			nodeToBeNamed.setName(name);
		}
	}
	
	/**
	 * Ordnet jedem Knoten eine grafische Position zu.
	 * @param positions Die zuzuordnenden Positionen.
	 * @throws NodeNotFoundException Wenn eine eine ID in positions nicht im Petrinetz existiert.
	 */
	public void initPositions(Map<String, Position> positions) throws NodeNotFoundException {
		Set<String> ids = positions.keySet();
		for (String id : ids) {
			Node nodeToBePositioned = getNodeById(id);
			Position position = positions.get(id);
			nodeToBePositioned.setPosition(position);
		}
	}
	
	
	/**
	 * Ordnet jeder Stelle ihre initialen Marken zu,
	 * @param tokens Eine Map der Stellen-IDs auf die Zahl der Marken. 
	 * @throws NodeNotFoundException Wenn eine ID in tokens nicht im Petrinetz existiert.
	 */
	public void initTokens(Map<String, Integer> tokens) throws NodeNotFoundException {
		Set<String> ids = tokens.keySet();
		for (String id : ids) {
			Place place = getPlaceById(id);
			int numNewTokens = tokens.get(id);
			place.initNumTokens(numNewTokens);
		}
	}
	
	/**
	 * Registriert alle Verbindungen im Petrinetz bei den Knoten.
	 * @param arcs Die Verbindungen, jede ist über ihre ID identifiziert und enthält die IDs von
	 * Start- und Endknoten.
	 * @throws IllegalArcException Wenn eine Verbindung zwischen Knoten gleicher Farbe existiert.
	 */
	public void initArcs(Map<String, String[]> arcs) throws IllegalArcException {
		Set<String> arcIds = arcs.keySet();
		
		for (String arcId : arcIds) {
			String fromId = arcs.get(arcId)[0];
			String toId = arcs.get(arcId)[1];
			
			// Als erstes testen, ob Kante vom Stelle zu Transition läuft.
			try {
				Place from = getPlaceById(fromId);
				Transition to = getTransitionById(toId);
				
				PlaceToTransitionArc arc = new PlaceToTransitionArc(arcId, from, to);
				from.register(arc);
				to.register(arc);
				
			} catch (NodeNotFoundException e1) {
				// Dann kann es nur sein, dass die Kante/arc von Transition zu Stelle läuft.
				try {
					Transition from = getTransitionById(fromId);
					Place to = getPlaceById(toId);				
					
					TransitionToPlaceArc arc = new TransitionToPlaceArc(arcId, from, to);
					from.register(arc);
					to.register(arc);
					
				// Und wenn das nicht geht, dann darf eine solche Kante nicht im Petrinetz existieren,
				// da es bipartit ist.
				} catch (NodeNotFoundException e2) {
					String m = "Kante " + arcId + " von " + fromId + " zu " + toId + ".";
					throw new IllegalArcException("Kante gefunden, die nicht von Transition " +
							"zu Stelle oder von Stelle zu Transition verläuft. Petrinetz muss " + 
							"bipartit sein. " + m);
				}
			}					
		}
	}
}

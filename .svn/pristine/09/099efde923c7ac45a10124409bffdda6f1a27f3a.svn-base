package model;

import java.io.File;
import java.util.ArrayList;
import java.util.Formatter;
import java.util.List;

/**
 * Nimmt eine Menge von <code>File</code>s entgegen und analysiert sie.
 * Dann gibt es die Möglichkeit, die Ergebnisse der Verarbeitung formatiert 
 * ausgeben zu lassen.
 */
public class BatchAnalyzer {
	private static final String[] FILE_NAME_HEADING = {"", "Dateiname"};
	private static final String[] IS_RESTRICTED_HEADING = {"", "beschränkt"};
	private static final String[] PATH_LENGTH_HEADING = {
		"Knoten / Kanten bzw.",
		"Pfadlänge:Pfad; m, m'"
	};
	private static final String IS_LIMITED_STR = "ja";
	private static final String IS_NOT_LIMITED_STR = "nein";
	
	private final int NUM_FILES;
	private List<ReachabilityGraph> reachNets = new ArrayList<ReachabilityGraph>();
	private List<PetriNet> petriNets = new ArrayList<PetriNet>();
	
	private List<String> fileNames = new ArrayList<String>();
	private List<Boolean> isLimited = new ArrayList<Boolean>();
	
	private List<List<Marking>> criterionPaths = new ArrayList<List<Marking>>(); 
	private List<Marking> ms = new ArrayList<Marking>();
	private List<Marking> mStrokes = new ArrayList<Marking>();
	
	private Formatter test = new Formatter();
	
	public BatchAnalyzer(File[] pnmls) {
		NUM_FILES = pnmls.length;
		for (File pnml : pnmls) {
			fileNames.add(pnml.getName());
			System.out.println(pnml.getName());
			
			PetriNet petriNet = new PnmlParser(pnml).getPetriNet();
			petriNets.add(petriNet);
			ReachabilityGraph reachNet = new ReachabilityGraph(petriNet);
			reachNets.add(reachNet);			
		}
		
		analyzeNets();
	}
	
	private void analyzeNets() {
		for (int i  = 0; i < NUM_FILES; i++) {
			PetriNet petriNet = petriNets.get(i);
			ReachabilityGraph reachNet = reachNets.get(i);
			
			try {
				reachNet.analyze(petriNet);
				// Graph garantiert beschraenkt ab hier.
				isLimited.add(true);
				ms.add(null);
				mStrokes.add(null);
				criterionPaths.add(null);
				
			} catch (GraphIsUnlimitedException e) {
				// Graph ist garantiert unbeschraenkt ab hier.
				isLimited.add(false);
				ms.add(e.getStart());
				mStrokes.add(e.getEnd());
				criterionPaths.add(e.getPath());
			}
		}
	}
	

	
	public String summary() {
		int widthFileNameCol = getLongestStringLen(fileNames);
		String[] limitColNames = {IS_LIMITED_STR, IS_NOT_LIMITED_STR, IS_RESTRICTED_HEADING[1]};
		int widthIsLimitedCol = getLongestStringLen(limitColNames);
		int widthNodePathCol = 10; // getLongestStringLen();
		
		int widthMCol = 10; // getLongestStringLen();
		int widthMStrokeCol = 10; // getLongestStringLen();
		
		String headerLine0 = rep(" ", widthFileNameCol) + 
				"|" + rep(" ", widthIsLimitedCol) + 
				"|" + PATH_LENGTH_HEADING[0] + 
				"\n";
		String headerLine1 = pad(FILE_NAME_HEADING[1], widthFileNameCol) +
				"|" + pad(IS_RESTRICTED_HEADING[1], widthIsLimitedCol) +
				"|" + PATH_LENGTH_HEADING[1] +
				"\n";
		String headerLine = rep("-", widthFileNameCol) +
				"|" + rep("-", widthIsLimitedCol) +
				"|" + rep("-", widthNodePathCol + widthMCol + widthMStrokeCol) +
				"\n";
		
		String summary = headerLine0 + headerLine1 + headerLine;
		for (int i = 0; i < NUM_FILES; i++) {
			String line = "";
			String fileName = fileNames.get(i);
			String limited = isLimited.get(i) ? IS_LIMITED_STR : IS_NOT_LIMITED_STR;
			
			String lastCol;
			if (isLimited.get(i)) {
				ReachabilityGraph reachNet = reachNets.get(i);
				lastCol = String.valueOf(reachNet.getMarkings().size()) + 
						" / " +
						String.valueOf(reachNet.getArcs().size());
			} else {
				List<Marking> path = criterionPaths.get(i);
				Marking m = ms.get(i);
				Marking mStroke = mStrokes.get(i);
				
				String pathStr = "(";
				for (Marking marking : path) {
					pathStr += marking.getId() + "|";
				}
				pathStr += ")";
				
				lastCol = pad(String.valueOf(path.size()) + ": " + pathStr + "; ", widthNodePathCol) + 
						pad(m.guiName() + ", ", widthMCol) +
						pad(mStroke.guiName(), widthMStrokeCol);
			}
			
			line += pad(fileName, widthFileNameCol) + 
					"|" + pad(limited, widthIsLimitedCol) +
					"|" + lastCol;
			summary += line + "\n";
		}
		
		return summary;
	}
	
	private static String pad(String s, int numPads) {
		return String.format("%1$-" + String.valueOf(numPads) + "s", s);
	}

	private static String rep(String s, int times) {
		String collector = "";
		for (int i = 0; i < times; i++) {
			collector += s;
		}
		
		return collector;
	}
	
	/**
	 * Gibt die Zahl der Zeichen des laengsten Strings einer Menge von Strings.
	 * @param strings Die Strings, die gemessen werden.
	 * @return Laenge des laengsten Strings.
	 */
	private static int getLongestStringLen(List<String> strings) {
		int longest = 0;
		for (String string : strings) {
			if (string.length() > longest)
				longest = string.length();
		}
		
		return longest;
	}

	/**
	 * Gibt die Zahl der Zeichen des laengsten Strings einer Menge von Strings.
	 * @param strings Die Strings, die gemessen werden.
	 * @return Laenge des laengsten Strings.
	 */
	private static int getLongestStringLen(String[] strings) {
		List<String> stringList = new ArrayList<String>();
		for (int i = 0; i < strings.length; i++) {
			stringList.add(strings[i]);
		}
		
		return getLongestStringLen(stringList);
	}
}

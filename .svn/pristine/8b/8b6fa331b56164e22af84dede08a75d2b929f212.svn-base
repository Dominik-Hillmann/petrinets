package model;

import java.io.File;
import java.util.ArrayList;
import java.util.Formatter;
import java.util.List;

/**
 * Nimmt eine Menge von <code>File</code>s entgegen und analysiert sie.
 * Dann gibt es die Möglichkeit, die Ergebnisse der Verarbeitung formatiert 
 * ausgeben zu lassen.
 */
public class BatchAnalyzer {
	private static final String[] FILE_NAME_HEADING = {"", "Dateiname"};
	private static final String[] IS_RESTRICTED_HEADING = {"", "beschränkt"};
	private static final String[] PATH_LENGTH_HEADING = {
		"Knoten / Kanten bzw.",
		"Pfadlänge:Pfad; m, m'"
	};
	
	private final int NUM_FILES;
	private List<ReachabilityGraph> reachNets = new ArrayList<ReachabilityGraph>();
	private List<PetriNet> petriNets = new ArrayList<PetriNet>();
	
	private List<String> fileNames = new ArrayList<String>();
	private List<Boolean> isLimited = new ArrayList<Boolean>();
	private List<Marking> ms = new ArrayList<Marking>();
	private List<Marking> mStrokes = new ArrayList<Marking>();
	
	private Formatter test = new Formatter();
	
	public BatchAnalyzer(File[] pnmls) {
		NUM_FILES = pnmls.length;
		for (File pnml : pnmls) {
			fileNames.add(pnml.getName());
			
			PetriNet petriNet = new PnmlParser(pnml).getPetriNet();
			petriNets.add(petriNet);
			ReachabilityGraph reachNet = new ReachabilityGraph(petriNet);
			reachNets.add(reachNet);			
		}
		
		analyzeNets();
	}
	
	private void analyzeNets() {
		for (int i  = 0; i < NUM_FILES; i++) {
			PetriNet petriNet = petriNets.get(i);
			ReachabilityGraph reachNet = reachNets.get(i);
			
			try {
				reachNet.analyze(petriNet);
				// Graph garantiert beschraenkt ab hier.
				isLimited.add(true);
				
			} catch (GraphIsUnlimitedException e) {
				// Graph ist garantiert unbeschraenkt ab hier.
				isLimited.add(false);
				ms.add(e.getStart());
				ms.add(e.getEnd());
			}
		}
	}	
	
	public String summary() {
		return "";
	}

}

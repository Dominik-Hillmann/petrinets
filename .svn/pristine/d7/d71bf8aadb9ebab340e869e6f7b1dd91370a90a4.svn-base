package view;


/**TODO 
 * NOTEs
 * 
 * Tag über die Projekt-Directory-Wurzel erstellen, sonst nicht alles drin.
 * wie gute Note?
 * 		keine Effizienz Algo
 * 		alle Punkte Aufgabenstellung
 * bei händischer Änderung ist das die neue Startmarkierung
 * Verschiebung der Splitbreite soll nach Änderungen erhalten bleiben
 */
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Rectangle;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.graphstream.ui.swingViewer.ViewPanel;
import org.graphstream.ui.view.Viewer;
import org.graphstream.ui.view.ViewerPipe;

import controller.ClickListener;
import controller.ClickListenerRightGraph;
import controller.Controller;
import model.BatchAnalyzer;
import model.PetriNet;
import model.PnmlParser;
import model.ReachabilityGraph;

/**
 * Das Fenster, in dem 
 * @author Dominik Hillmann, 6764860
 */
public class GraphsFrame extends JFrame {	
	/** Von Ecliplse generierte ID. */
	private static final long serialVersionUID = -7853267457644325182L;
	
	private Controller controller;
	
	private JSplitPane splitPane;
	
	private static Dimension preferredSize = new Dimension(1000, 700);
	
	/** Das Panel, in dem die beiden Graphen angezeigt werden. */
	private JPanel topPanel;
	private JSplitPane graphicsSplit;
	private ViewPanel leftGraph;
//	private JPanel rightGraph;
	private ViewPanel rightGraph;
	
	/** Untere Hälfte des Fensters. */
	private JPanel bottomPanel;
	/** Macht den Text scrollbar. */
	private JScrollPane scrollPane;
	/** Anzeige aller Informationen. */
	private JTextArea textArea;
	/** Enthälte alle Buttons der Toolbar. */
	private JPanel toolbar;
	/** Button, der die Erreichbarkeitsanalyse anstoesst. */
	private JButton analyseButton;
	/** Setzt Erreichbarkeitsgraphen zurück. */
	private JButton deleteButton;
	/** Fügt markiertem Knoten einen Token hinzu. */
	private JButton addBtn;
	/** Zieht markiertem Knoten einen Token ab. */
	private JButton subBtn;
	/** Leert den Textbereich. */
	private JButton emptyTextBtn;
	/** Setzt Erreichbarkeitsgraph auf aktuelle Wurzel zurück. */
	private JButton resetBtn;
	
	/** Der Ordner, in dem die Standardbeispiele zu finden sind. */
	private final static String RELATIVE_START_DIR = "../ProPra-WS20-Basis/Beispiele";
	/** Der Filter für die PNML-Dateien. */
	private static FileNameExtensionFilter pnmlFilter = new FileNameExtensionFilter("Nur PNML-Dateien", "pnml");
	/** Der Pfad zum Ordner der zuletzt geoeffneten Datei. */
	private String lastDir = null;
	/** Die gewaehlte PNML-Datei. */
	private File chosenFile = null;
	
	/**
	 * Konstruktor, dem die Modelle übergeben werden, auf denen die Analysen
	 * stattfinden.
	 * @param petriNet Das Petrinetz.
	 * @param reach Der Erreichbarkeitsgraph.
	 */
	public GraphsFrame(PetriNet petriNet, ReachabilityGraph reach) {
		super("Dominik Hillmann, Matrikelnr. 6764860");
		System.setProperty(
			"org.graphstream.ui.renderer", 
			"org.graphstream.ui.j2dviewer.J2DGraphRenderer"
		);
		splitPane = new JSplitPane(); 
		splitPane.setResizeWeight(0.5);

		topPanel = new JPanel();
		graphicsSplit = new JSplitPane(); 
		graphicsSplit.setResizeWeight(0.5);
		// leftGraph = new JPanel();
		// rightGraph = new JPanel();

		bottomPanel = new JPanel();
		scrollPane = new JScrollPane();
		textArea = new JTextArea();
		
		initController(petriNet, reach);
		
		// Standardgröße und Standardlayout.
		setPreferredSize(preferredSize);
		getContentPane().setLayout(new GridLayout());
		getContentPane().add(splitPane);
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		// Einstellungen an der obersten SplitPane.
		splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
//		setDividersHalf();
		splitPane.setTopComponent(topPanel);
		splitPane.setBottomComponent(bottomPanel);

		// Einstellungen oberes Panel.
		topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.Y_AXIS));
		topPanel.add(graphicsSplit);
		graphicsSplit.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
		
		// Einstellungen unteres Panel.
		bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));
		bottomPanel.add(scrollPane);
		scrollPane.setViewportView(textArea);
		textArea.setEditable(false);
        textArea.setFont(new Font("monospaced", Font.PLAIN, 14));
		
		createToolbar();
		createMenuBar();

		pack();
		setVisible(true);
		setDividersHalf();
	}

	/**
	 * 
	 * @param reachGraph
	 */
	private void initReachGraph(ReachabilityGraph reachGraph) {
//		Viewer viewer = new Viewer(new VisualReachabilityGraph(reachGraph),
//				Viewer.ThreadingModel.GRAPH_IN_ANOTHER_THREAD);
		Viewer viewer = new Viewer(controller.getReachGraph(), Viewer.ThreadingModel.GRAPH_IN_ANOTHER_THREAD);
		viewer.enableAutoLayout();
		rightGraph = viewer.addDefaultView(false);
		
		ViewerPipe viewerPipe = viewer.newViewerPipe();
//		ClickListener clickListener = new ClickListener(controller);
		ClickListenerRightGraph clickListener = new ClickListenerRightGraph(controller);
		viewerPipe.addViewerListener(clickListener);
		
		rightGraph.addMouseListener(new MouseAdapter() {
			
			@Override
			public void mousePressed(MouseEvent me) {
				 System.out.println("ER mousePressed: " + me);
				 System.out.println(viewerPipe.toString());
				 viewerPipe.pump();
			}

			@Override
			public void mouseReleased(MouseEvent me) {
//				 System.out.println("ER mouseReleased: " + me);
				 viewerPipe.pump();
			}
		});
	}

	/**
	 * 
	 * @param petriNet
	 */
	private void initPetriGraph(PetriNet petriNet) {
		Viewer viewer = new Viewer(controller.getPetriGraph(), Viewer.ThreadingModel.GRAPH_IN_ANOTHER_THREAD);
		viewer.disableAutoLayout();
		leftGraph = viewer.addDefaultView(false);

		ViewerPipe viewerPipe = viewer.newViewerPipe();
		ClickListener clickListener = new ClickListener(controller);
		viewerPipe.addViewerListener(clickListener);

		leftGraph.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent me) {
				// System.out.println("MyFrame - mousePressed: " + me);
				viewerPipe.pump();
			}

			@Override
			public void mouseReleased(MouseEvent me) {
//				 System.out.println("MyFrame - mouseReleased: " + me);
				viewerPipe.pump();
			}
		});
	}
	
	private void initController(PetriNet petriNet, ReachabilityGraph reachNet) {
		controller = new Controller(this, petriNet, reachNet);
		initPetriGraph(petriNet);
		initReachGraph(reachNet);		

		graphicsSplit.setLeftComponent(leftGraph);
		graphicsSplit.setRightComponent(rightGraph);
		graphicsSplit.setDividerLocation(500);
	}
	
	/**
	 * Fuegt dem Textbereich den String {@link String}
	 * @param text
	 */
	public void addText(String text) {
		textArea.append(text + "\n");
	}
	
	private void createToolbar() {
		toolbar = new JPanel();
		
		// Analyse
		analyseButton = new JButton("Analysiere");
		analyseButton.addActionListener(analyze);
		toolbar.add(analyseButton);		
		
		// Lösche EG
		deleteButton = new JButton("Lösche EG");
		deleteButton.addActionListener(resetGraphs);
		toolbar.add(deleteButton);
		
		// Add Button		
		addBtn = new JButton("+");
		addBtn.addActionListener(event -> controller.markedPlusOne());
		toolbar.add(addBtn);
		
		// Minus Button		
		subBtn = new JButton("-");
		subBtn.addActionListener(event -> controller.markedMinusOne());
		toolbar.add(subBtn);
		
		// Textbereich leeren
		emptyTextBtn = new JButton("Textbereich leeren");
		emptyTextBtn.addActionListener(resetTextArea);
		toolbar.add(emptyTextBtn);
		
		// Auf aktuelle Markierung zurueksetzen
		resetBtn = new JButton("Reset");
		resetBtn.addActionListener(resetReachabilityToRoot);
		toolbar.add(resetBtn);
		
		bottomPanel.add(toolbar);
	}
	
	private void createMenuBar() {
		// Menübar und Unterpunkt "Datei".
		JMenuBar menuBar = new JMenuBar();
		JMenu fileMenu = new JMenu("Datei");
		
		// Unterpunkt, der neue PNML öffnet
		JMenuItem open = new JMenuItem("Öffnen");
		open.addActionListener(openPnml);
		fileMenu.add(open);
		
		// Unterpunkt für Verarbeitung vieler Dateien.
		JMenuItem openMany = new JMenuItem("Analyse mehrer Dateien");
		openMany.addActionListener(openManyPnmls);
		fileMenu.add(openMany);
		
		JMenuItem reOpen = new JMenuItem("Neu laden");
		reOpen.addActionListener(resetGraphs);
		fileMenu.add(reOpen);
		
		JMenuItem exit = new JMenuItem("Beenden");
		exit.addActionListener(event -> System.exit(0));
		fileMenu.add(exit);

		menuBar.add(fileMenu);
		
		JMenu displayMenu = new JMenu("Anzeige");
		
		JMenuItem to5050Partition = new JMenuItem("Displayaufteilung zurücksetzen");
		to5050Partition.addActionListener(event -> setDividersHalf());
		displayMenu.add(to5050Partition);
		
		JMenuItem currentFileName = new JMenuItem("Zeige Dateinamen");
		currentFileName.addActionListener(showCurrentFileName);
		displayMenu.add(currentFileName);	
				
		menuBar.add(displayMenu);
				
		setJMenuBar(menuBar);
	}

	// TODO in den Controller packen
	private final ActionListener analyze = event -> {
		controller.resetReachToCurrentRoot();
		boolean isLimited = controller.analyze();
		String answer = "Das Petrinetz ist " + (isLimited ? "beschränkt" : "unbeschränkt") + ".";
		JOptionPane.showMessageDialog(this, answer, "Beschränktheitsanalyse des Petrinetzes", JOptionPane.PLAIN_MESSAGE);
		addText("Beschränktheitsanalyse: " + answer);
	};
	
	//TODO in den Controller
	private final ActionListener resetReachabilityToRoot = event -> {
		controller.resetReachToCurrentRoot();
	};
	
	// TODO in den Controller packen
	private final ActionListener resetTextArea = event -> {
		textArea.setText(null);
	};
	
	
	private final ActionListener showCurrentFileName = event -> {
		try {
			String fileName = chosenFile.getName();
			addText("Der Name der aktuellen Datei ist " + fileName + ".");
		} catch (NullPointerException e) {
			addText("Es wurde noch keine Datei geladen. Es kann kein Name angezeigt werden.");
		}
	};
	
	
	// TODO in den controller packen
	private final ActionListener resetGraphs = event -> {
		addText("Setze den Erreichbarkeitsgraphen auf seinen Anfangszustand zurück.");
		controller.resetPetriGraph();
		controller.resetReachGraph();
	};

	// TODO in den controller packen
	private final ActionListener openManyPnmls = event -> {
		JFileChooser fileChooser = new JFileChooser();
//		FileNameExtensionFilter pnmlFilter = new FileNameExtensionFilter("Nur PNML-Dateien", "pnml");
		fileChooser.setFileFilter(pnmlFilter);
		fileChooser.setMultiSelectionEnabled(true);
		// TODO Was, wenn das dir nicht existiert?
		fileChooser.setCurrentDirectory(new File(lastDir == null ? RELATIVE_START_DIR : lastDir));
					
		int choice = fileChooser.showOpenDialog(this);
		if (choice == JFileChooser.APPROVE_OPTION) {
			BatchAnalyzer analyzer = new BatchAnalyzer(fileChooser.getSelectedFiles());
			addText(analyzer.summary());
		}
	};	

	// TODO in den controller packen
	private ActionListener openPnml = event -> {
		JFileChooser fileChooser = new JFileChooser();
//		FileNameExtensionFilter pnmlFilter = new FileNameExtensionFilter("Nur PNML-Dateien", "pnml");
		fileChooser.setFileFilter(pnmlFilter);
		// TODO Was, wenn das dir nicht existiert?
		fileChooser.setCurrentDirectory(new File(lastDir == null ? RELATIVE_START_DIR : lastDir));
					
		int choice = fileChooser.showOpenDialog(this);
		if (choice == JFileChooser.APPROVE_OPTION) {
			System.out.println("APPROVE OPTION");
			chosenFile = fileChooser.getSelectedFile();
			// Petrinetz einbetten
			PetriNet parsedPetriNet = new PnmlParser(chosenFile).getPetriNet();
			ReachabilityGraph reachNet = new ReachabilityGraph(parsedPetriNet);
			initController(parsedPetriNet, reachNet);				
		} else {
			addText("Diese Datei kann nicht verarbeitet werden.");
		}
		
		lastDir = fileChooser.getCurrentDirectory().getAbsolutePath().toString();
	};

	private void setDividersHalf() {
		Rectangle bounds = getBounds();
		int currentWidth = bounds.width;
		int halfWidth = currentWidth / 2;
		int currentHeight = bounds.height;
		int halfHeight = currentHeight / 2;
//		System.out.println("HALFFING " + )
		
		graphicsSplit.setDividerLocation(halfWidth);
		splitPane.setDividerLocation(halfHeight);
	}
}
